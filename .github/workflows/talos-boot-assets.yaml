---
name: Talos Boot Assets Generation

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.repository_owner }}-build

env:
  # renovate: depName=ghcr.io/siderolabs/intel-ucode datasource=docker versioning=loose
  INTEL_UCODE_VERSION: 20231114
  # renovate: depName=ghcr.io/siderolabs/i915-ucode datasource=docker versioning=loose
  I915_UCODE_VERSION: 20231111
  # renovate: depName=ghcr.io/siderolabs/amd-ucode datasource=docker versioning=loose
  AMD_UCODE_VERSION: 20231111
  # renovate: depName=ghcr.io/siderolabs/amdgpu-firmware datasource=docker versioning=loose
  AMDGPU_FIRMWARE_VERSION: 20231111
  # renovate: manual only for now
  DRBD_VERSION: 9.2.4-v1.5.5
  # renovate: depName=ghcr.io/siderolabs/tailscale datasource=docker
  TAILSCALE_VERSION: 1.54.0
  # renovate: depName=ghcr.io/siderolabs/iscsi-tools datasource=docker versioning=semver-coerced
  ISCSI_TOOLS_VERSION: v0.1.4
  # renovate: depName=ghcr.io/siderolabs/thunderbolt datasource=docker versioning=semver-coerced
  THUNDERBOLT_VERSION: v1.5.5

jobs:
  check-releases:
    name: Check for new releases
    runs-on: ubuntu-latest

    steps:
      - name: Fetch latest Talos release version
        id: talos-release
        run: |
          talos_release_tag=$(curl -sL https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r ".tag_name")
          echo "talos_release_tag=$talos_release_tag" >> $GITHUB_OUTPUT

      - name: Fetch latest Boot Asset release version
        id: boot-asset-release
        run: |
          boot_assets_release_tag=$(curl -sL https://api.github.com/repos/jtcressy-home/talos-boot-assets/releases/latest | jq -r ".tag_name")
          echo "boot_assets_release_tag=$boot_assets_release_tag" >> $GITHUB_OUTPUT

      - name: Fetch latest Talos release body
        id: talos-release-body
        run: |
          echo 'talos_release_body<<EOF' >> $GITHUB_OUTPUT
          curl -sL https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r ".body" >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Compare release versions
        if: steps.talos-release.outputs.talos_release_tag != steps.boot-asset-release.outputs.boot_assets_release_tag
        id: compare-releases
        run: |
          curl https://raw.githubusercontent.com/Ariel-Rodriguez/sh-semversion-2/main/semver2.sh -o /tmp/semver2.sh
          chmod +x /tmp/semver2.sh
          compare_result=$(/tmp/semver2.sh \
            ${{ steps.talos-release.outputs.talos_release_tag }} \
            ${{ steps.boot-asset-release.outputs.boot_assets_release_tag }})
          echo "compare_result=$compare_result" >> $GITHUB_OUTPUT

    outputs:
      newTalosReleaseFound: ${{ steps.compare-releases.outputs.compare_result }}
      talosReleaseTag: ${{ steps.talos-release.outputs.talos_release_tag }}
      talosReleaseBody: ${{ steps.talos-release-body.outputs.talos_release_body }}

  sync-talos-fork:
    needs: [ check-releases ]
    name: Sync talos fork with upstream
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: talos
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Sync upstream changes
      run: |
        git remote add talos https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/siderolabs/talos
        git pull talos refs/tags/${{ needs.check-releases.outputs.talosReleaseTag }} --rebase
        git push --set-upstream origin talos --force

  sync-pkgs-fork:
    needs: [ check-releases ]
    name: Sync pkgs fork with upstream
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: pkgs
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Get pkgs release tag
      id: pkgs-release
      run: |
        release=release-$(grep -Eo '[0-9]\.[0-9]+' <<< '${{ needs.check-releases.outputs.talosReleaseTag }}')
        echo "release=$release" >> $GITHUB_OUTPUT

    - name: Setup git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Sync upstream changes
      run: |
        git remote add pkgs https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/siderolabs/pkgs
        git pull pkgs ${{ steps.pkgs-release.outputs.release }} --rebase
        git push --set-upstream origin pkgs --force

  build-kernel:
    needs: [ check-releases, sync-pkgs-fork ]
    if: needs.check-releases.outputs.newTalosReleaseFound || github.event_name == 'workflow_dispatch'
    name: Build kernel image
    runs-on: ${{ github.event_name == 'workflow_dispatch' && 'buildjet-16vcpu-ubuntu-2204' || 'ubuntu-latest' }}

    outputs:
      sha: ${{ steps.hash.outputs.sha_short }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: pkgs

      - name: Get short commit hash
        id: hash
        run: |
          sha_short=$(git rev-parse --short HEAD)
          echo "sha_short=$sha_short" >> $GITHUB_OUTPUT

      - name: Check if kernel image is already built
        id: check
        run: |
          token=$(echo "${{ secrets.GITHUB_TOKEN }}" | base64)
          tags=$(curl -H "Authorization: Bearer $token" https://ghcr.io/v2/${{ github.repository_owner}}/kernel/tags/list)
          built=$(echo "$tags" | jq -r '.tags | . != null and contains(["${{ steps.hash.outputs.sha_short }}"])')
          echo "built=$built" >> $GITHUB_OUTPUT

      - name: Maximize build space
        if: steps.check.outputs.built == 'false'
        uses: jlumbroso/free-disk-space@main
        with:
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up QEMU
        if: steps.check.outputs.built == 'false'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check.outputs.built == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: steps.check.outputs.built == 'false'
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build kernel image
        if: steps.check.outputs.built == 'false'
        env:
          PLATFORM: linux/amd64,linux/arm64
          USERNAME: ${{ github.repository_owner}}
        run: make kernel PUSH=true

  build-installer:
    needs: [ check-releases, sync-talos-fork, build-kernel ]
    if: needs.check-releases.outputs.newTalosReleaseFound || github.event_name == 'workflow_dispatch'
    name: Build installer image
    runs-on: ${{ github.event_name == 'workflow_dispatch' && 'buildjet-16vcpu-ubuntu-2204' || 'ubuntu-latest' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: talos

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build installer image
        env:
          PLATFORM: linux/amd64,linux/arm64
          USERNAME: ${{ github.repository_owner}}
          TAG: ${{ needs.check-releases.outputs.talosReleaseTag }}
          PKG_KERNEL: ghcr.io/${{ github.repository_owner}}/kernel:${{ needs.build-kernel.outputs.sha }}
        run: make installer PUSH=true

  build-boot-assets:
    needs: [ check-releases, build-installer ]
    if: needs.check-releases.outputs.newTalosReleaseFound || github.event_name == 'workflow_dispatch'
    name: Build boot assets
    strategy:
      matrix:
        include:
        - arch: amd64
          runs-on: buildjet-16vcpu-ubuntu-2204
        - arch: arm64
          runs-on: buildjet-16vcpu-ubuntu-2204-arm
    runs-on: ${{ matrix.runs-on }}

    permissions:
      contents: write

    steps:
      - name: Build ${{ matrix.arch }} installer w/ Extensions
        run: |
          docker run --rm --platform=linux/${{ matrix.arch }} -t -v $PWD/_out:/out -v /dev:/dev --privileged --entrypoint /bin/imager ghcr.io/${{ github.repository_owner }}/installer:${{ needs.check-releases.outputs.talosReleaseTag }} installer \
            --arch ${{ matrix.arch }} \
            --base-installer-image ghcr.io/${{ github.repository_owner}}/installer:${{ needs.check-releases.outputs.talosReleaseTag }} \
            --system-extension-image ghcr.io/siderolabs/intel-ucode:${{ env.INTEL_UCODE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/i915-ucode:${{ env.I915_UCODE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/amdgpu-firmware:${{ env.AMDGPU_FIRMWARE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/drbd:${{ env.DRBD_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/tailscale:${{ env.TAILSCALE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/iscsi-tools:${{ env.ISCSI_TOOLS_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/thunderbolt:${{ env.THUNDERBOLT_VERSION }}
            
      - name: Upload installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: talos-installer
          path: _out/metal-*-installer.tar
          if-no-files-found: error
          retention-days: 1

  push-installer-image:
    needs: [ check-releases, build-boot-assets ]
    name: Push installer image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Download talos installer image
        uses: actions/download-artifact@v3
        with:
          name: talos-installer
          path: /tmp/talos-build-assets

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push installer image
        env:
          BASE_TAG: ghcr.io/${{ github.repository_owner}}/installer:${{ needs.check-releases.outputs.talosReleaseTag }}
        run: |
          docker load -i /tmp/talos-build-assets/metal-amd64-installer.tar
          docker tag ${BASE_TAG} ${BASE_TAG}-amd64
          docker rmi ${BASE_TAG}
          docker load -i /tmp/talos-build-assets/metal-arm64-installer.tar
          docker tag ${BASE_TAG} ${BASE_TAG}-arm64
          docker rmi ${BASE_TAG}
          docker push ${BASE_TAG}-amd64
          docker push ${BASE_TAG}-arm64
          docker manifest create \
            ${BASE_TAG} \
            --amend ${BASE_TAG}-amd64 \
            --amend ${BASE_TAG}-arm64
          docker manifest annotate ${BASE_TAG} ${BASE_TAG}-amd64 --os linux --arch amd64
          docker manifest annotate ${BASE_TAG} ${BASE_TAG}-arm64 --os linux --arch arm64
          docker manifest push ${BASE_TAG}

  build-secure-boot-assets:
    needs: [ check-releases, build-installer ]
    if: needs.check-releases.outputs.newTalosReleaseFound || github.event_name == 'workflow_dispatch'
    name: Build secure boot assets
    strategy:
      matrix:
        include:
        - arch: amd64
          runs-on: buildjet-16vcpu-ubuntu-2204
        - arch: arm64
          runs-on: buildjet-16vcpu-ubuntu-2204-arm
    runs-on: ${{ matrix.runs-on }}

    permissions:
      contents: write

    # container:
    #   image: ghcr.io/${{ github.repository_owner}}/installer:${{ needs.check-releases.outputs.talosReleaseTag }}
    #   options: --privileged
    #   volumes:
    #     - /dev:/dev

    steps:
      - run: mkdir -p $PWD/_out
      - name: Write uki-signing-cert.pem
        id: uki-signing-cert-pem
        uses: timheuer/base64-to-file@784a1a4a994315802b7d8e2084e116e783d157be # v1.2.4
        with:
          encodedString: "${{ secrets.UKI_SIGNING_CERT }}"
          fileDir: _out
          fileName: uki-signing-cert.pem

      - name: Write uki-signing-key.pem
        id: uki-signing-key-pem
        uses: timheuer/base64-to-file@784a1a4a994315802b7d8e2084e116e783d157be # v1.2.4
        with:
          encodedString: "${{ secrets.UKI_SIGNING_KEY }}"
          fileDir: _out
          fileName: uki-signing-key.pem

      - name: Write pcr-signing-key.pem
        id: pcr-signing-key-pem
        uses: timheuer/base64-to-file@784a1a4a994315802b7d8e2084e116e783d157be # v1.2.4
        with:
          encodedString: "${{ secrets.PCR_SIGNING_KEY }}"
          fileDir: _out
          fileName: pcr-signing-key.pem

      - name: Write pcr-signing-public-key.pem
        id: pcr-signing-public-key-pem
        uses: timheuer/base64-to-file@784a1a4a994315802b7d8e2084e116e783d157be # v1.2.4
        with:
          encodedString: "${{ secrets.PCR_SIGNING_PUBLIC_KEY }}"
          fileDir: _out
          fileName: pcr-signing-public-key.pem

      - name: Build ${{ matrix.arch }} secureboot-installer w/ Extensions
        run: |
          docker run --rm --platform=linux/${{ matrix.arch }} -t -v $PWD/_out:/secureboot -v $PWD/_out:/out -v /dev:/dev --privileged --entrypoint /bin/imager ghcr.io/${{ github.repository_owner }}/installer:${{ needs.check-releases.outputs.talosReleaseTag }} secureboot-installer \
            --arch ${{ matrix.arch }} \
            --base-installer-image ghcr.io/${{ github.repository_owner}}/installer:${{ needs.check-releases.outputs.talosReleaseTag }} \
            --system-extension-image ghcr.io/siderolabs/intel-ucode:${{ env.INTEL_UCODE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/i915-ucode:${{ env.I915_UCODE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/amdgpu-firmware:${{ env.AMDGPU_FIRMWARE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/drbd:${{ env.DRBD_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/tailscale:${{ env.TAILSCALE_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/iscsi-tools:${{ env.ISCSI_TOOLS_VERSION }} \
            --system-extension-image ghcr.io/siderolabs/thunderbolt:${{ env.THUNDERBOLT_VERSION }}

      - name: Upload secureboot-installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: talos-secureboot-installer
          path: _out/metal-*-secureboot-installer.tar
          if-no-files-found: error
          retention-days: 1

  push-secureboot-installer-image:
    needs: [ check-releases, build-secure-boot-assets ]
    name: Push secureboot-installer image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Download talos secureboot-installer image
        uses: actions/download-artifact@v3
        with:
          name: talos-secureboot-installer
          path: /tmp/talos-build-assets

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push secureboot-installer image
        env:
          BASE_TAG: ghcr.io/${{ github.repository_owner}}/installer:${{ needs.check-releases.outputs.talosReleaseTag }}
        run: |
          docker load -i /tmp/talos-build-assets/metal-amd64-secureboot-installer.tar
          docker tag ${BASE_TAG} ${BASE_TAG}-secureboot-amd64
          docker rmi ${BASE_TAG}
          docker load -i /tmp/talos-build-assets/metal-arm64-secureboot-installer.tar
          docker tag ${BASE_TAG} ${BASE_TAG}-secureboot-arm64
          docker rmi ${BASE_TAG}
          docker push ${BASE_TAG}-secureboot-amd64
          docker push ${BASE_TAG}-secureboot-arm64
          docker manifest create \
            ${BASE_TAG} \
            --amend ${BASE_TAG}-secureboot-amd64 \
            --amend ${BASE_TAG}-secureboot-arm64
          docker manifest annotate ${BASE_TAG} ${BASE_TAG}-secureboot-amd64 --os linux --arch amd64
          docker manifest annotate ${BASE_TAG} ${BASE_TAG}-secureboot-arm64 --os linux --arch arm64
          docker manifest push ${BASE_TAG}

  create-release:
    needs: [ check-releases, push-installer-image, push-secureboot-installer-image ]
    if: needs.check-releases.outputs.newTalosReleaseFound
    name: Create a new release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Create a new release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-releases.outputs.talosReleaseTag }}
          body: ${{ needs.check-releases.outputs.talosReleaseBody }}
